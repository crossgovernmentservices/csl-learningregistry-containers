{"new_edits":false,"docs":[
{"_id":"_design/filtered-replication","_rev":"3-b58c13ba4c5be4c935ce803968be29ab","filters":{"change_feed_filter":"function(doc, req){\n    // Don't send the design document.\n    try{\n          // If there is no query parameters return send the document.\n        if (!req.query || !req.query.doc_type){\n            log(\"no req value or doc_type\");\n            return true;\n        }\n        if ( !doc || (doc.doc_type != req.query.doc_type)){\n            log(\"Ignore documents that is not of doc_type: '\"+req.query.doc_type+\"': \"+ doc._id);\n            return false;\n        }\n        //Check if the document say has does distribute field. if so don't send it\n        if (\"do_not_distribute\" in doc){\n            return false;\n        }\n    \n        // If there is no filter in the parameter just send the document.\n        if (!req.query.filter_description){\n            log(\"No filter available...\");\n            return true;\n        }\n        filter_description = JSON.parse(req.query.filter_description);\n        // Check to see the query parameter is valid  node filter description. if not\n        // we can filter anything out so send it.\n        if((\"custom_filter\" in filter_description) && filter_description.custom_filter == true){\n            log(\"No filtering needed custom filter is being used\");\n            return true;\n        }\n    \n        log(\"The filter is: \"+JSON.stringify(filter_description, null, 4))\n        // Variable to hold if the document is filter out on match.\n        // If include_exclude  is T if the filters describe what documents to accept\n        // all others are rejected F if the filters describe what documents to reject\n        // all others are accepted optional, T if not present\n        var include_doc =  (!(\"include_exclude\" in filter_description) || filter_description.include_exclude==true);\n        log(\"Include doc on match: \"+include_doc);\n        \n        //Keep track the see if the document match all the filters.\n         var match_all_filters = true;\n        \n        //Go through all the filters\n        for(var i in filter_description.filter){\n            var filter_key = filter_description.filter[i][\"filter_key\"];\n            var filter_value = filter_description.filter[i][\"filter_value\"];\n            var matched_value = null;\n            var filter_match = null;\n            \n            if (!filter_key || !filter_value){\n                log(\"Continuing the key/value loop... invalid filter_key: \"+filter_key+\" or filter_value: \"+filter_value );\n                continue;\n            }\n            //create a regular expression for the filter_key to check for matching against\n            //the document key.\n            var regex_key = new RegExp(filter_key);\n            \n            //Create regular expression for the key value\n            var regex_value = new RegExp(filter_value);\n            \n            log(\"Filter key:  \"+filter_key+\"\\tFilter value: \"+filter_value+\"\\t key regx: \"+regex_key);\n             //Look though the keys and for the variable that matches the filter key\n            for (var key in doc){\n                log(\"key: \"+key);\n                if (!key.match(regex_key)){\n                    continue;\n                }\n                matched_value = doc[key];\n                log(\"find a match: '\"+matched_value+\"'  for filter key:  \"+filter_key);\n                \n                //Make we have a valid data for filter_value and matched value\n                // otherwise keep looping.\n                if (!matched_value){\n                    log(\"The matched_value is bad:  '\"+matched_value +\"'...keep going\\n\");\n                    continue;\n                }\n                //Check if there is match\n                filter_match = JSON.stringify(matched_value).match(regex_value);\n                match_all_filters = match_all_filters && (filter_match != null);\n                \n                log(\"The match between '\"+regex_value+\"' and '\"+matched_value+\" is: \"+filter_match+\"\\n\");\n                //Exclude the document if there is a match\n                if((include_doc == true && !filter_match )){\n                    log(\"There is no match rejecting document...\");\n                    return false;\n                }\n            }\n        }\n        if( (include_doc == false) &&(match_all_filters == true))\n        {\n            log(\"rejecting document because it matches exclude filter...\\n\")\n            return false;\n        }\n        log(\"The document just match everything...\\n\");\n        return true;\n    }\n    catch(err)\n    {\n        log(\"Filter error: \"+err)\n        return false;\n    }\n}","replication_filter":"function(doc, req){\n        // Don't send the design document.\n        if ( !doc || (doc.doc_type != \"resource_data\")){\n            //print(\"Ignore document that is not resource_data_distributable: \"+ doc);\n            return false;\n        }\n        //Check if the document say has does distribute field. if so don't send it\n        if (\"do_not_distribute\" in doc){\n            return false;\n        }\n        // If there is no query parameters return send the document.\n        if (!req){\n            //print(\"no req value\");\n            return true;\n        }\n        // Check to see the query parameter is valid  node filter description. if not\n        // we can filter anything out so send it.\n        if((\"custom_filter\" in req) && req.custom_filter == true){\n            //print(\"No filtering needed custom filter is being used\");\n            return true;\n        }\n        // If there is no filter in the parameter just send the document.\n        var filter_doc = req.query;\n        if (!filter_doc){\n            //print(\"No filter available...\");\n            return true;\n        }\n        // Variable to hold if the document is filter out on match.\n        // If include_exclude  is T if the filters describe what documents to accept\n        // all others are rejected F if the filters describe what documents to reject\n        // all others are accepted optional, T if not present\n        var include_doc =  (!(\"include_exclude\" in filter_doc) ||filter_doc.include_exclude==true);\n        //print(\"Include doc on match: \"+include_doc);\n        \n        //Keep track the see if the document match all the filters.\n         var match_all_filters = true;\n        \n        //Go through all the filters\n        for(var i in filter_doc.filter){\n            var filter_key = filter_doc.filter[i][\"filter_key\"];\n            var filter_value = filter_doc.filter[i][\"filter_value\"];\n            var matched_value = null;\n            var filter_match = null;\n            \n            if (!filter_key || !filter_value){\n                //print(\"Continuing the key/value loop... invalid filter_key: \"+filter_key+\" or filter_value: \"+filter_value );\n                continue;\n            }\n            //create a regular expression for the filter_key to check for matching against\n            //the document key.\n            var regex_key = new RegExp(filter_key);\n            \n            //Create regular expression for the key value\n            var regex_value = new RegExp(filter_value);\n            \n            //print(\"Filter key:  \"+filter_key+\"\\tFilter value: \"+filter_value+\"\\t key regx: \"+regex_key);\n             //Look though the keys and for the variable that matches the filter key\n            for (var key in doc){\n                //print(\"key: \"+key);\n                if (!key.match(regex_key)){\n                    continue;\n                }\n                matched_value = doc[key];\n                //print(\"find a match: '\"+matched_value+\"'  for filter key:  \"+filter_key);\n                \n                //Make we have a valid data for filter_value and matched value\n                // otherwise keep looping.\n                if (!matched_value){\n                    //print(\"The matched_value is bad:  '\"+matched_value +\"'...keep going\\n\");\n                    continue;\n                }\n                //Check if there is match\n                filter_match = JSON.stringify(matched_value).match(regex_value);\n                match_all_filters = match_all_filters && (filter_match != null);\n                \n                //print(\"The match between '\"+regex_value+\"' and '\"+matched_value+\" is: \"+filter_match+\"\\n\");\n                //Exclude the document if there is a match\n                if((include_doc == true && !filter_match )){\n                    //print(\"There is no match rejecting document...\");\n                    return false;\n                }\n            }\n        }\n        if( (include_doc == false) &&(match_all_filters == true))\n        {\n            //print(\"rejecting document because it matches exclude filter...\\n\")\n            return false;\n        }\n        //print(\"The document just match everything...\\n\");\n        return true;\n    }"},"language":"javascript","README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["README.md","language","filters/","filters/replication_filter.js","filters/change_feed_filter.js","couchapp.json"],"signatures":{},"name":"Name of your CouchApp","objects":{},"description":"CouchApp"}},
{"_id":"_design/learningregistry-by-date","_rev":"3-c8417a604a3af5c42d9861386ffdf640","language":"javascript","views":{"docs":{"map":"function(doc) {\n    if(doc.doc_type == 'resource_data')\n    {\n    \tts = doc.node_timestamp.replace(/\\.[0-9]+Z/gi, \"\");\n        emit(ts, null);\n    }\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"Learning Registry By Date","objects":{},"description":"CouchApp"}},
{"_id":"_design/learningregistry-resource-location","_rev":"6-84ee85630924d82099a3fda95bba9e39","language":"javascript","views":{"docs":{"map":"function(doc) {\n    if(doc.doc_type == 'resource_data'){\n        if (Object.prototype.toString.call( doc.resource_locator ) === '[object Array]') {\n            for (i=0; i<doc.resource_locator.length; i++) {\n                emit(decodeURI(doc.resource_locator[i]),  null);  \n            }\n        } else {\n            emit(decodeURI(doc.resource_locator),  null);  \n        }\n    }\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"Learning Registry Resource Location","objects":{},"description":"CouchApp"}},
{"_id":"_design/learningregistry-resources","_rev":"3-ae53571a595f67409a70497f67dbacbf","language":"javascript","views":{"count":{"map":"function(doc) {\n  if (doc.doc_type == 'resource_data'){\n      emit(doc.doc_type, 1);\n  }  \n}","reduce":"function(keys, values, rereduce) {\n  return sum(values);\n}"},"docs":{"map":"function(doc) {\n  if (doc.doc_type == 'resource_data'){\n      emit(doc.doc_ID, null);\n  }  \n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","views/count/","views/count/reduce.js","views/count/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"Learning Registry Resources","objects":{},"description":"CouchApp"}},
{"_id":"_design/learningregistry-slicelite","_rev":"3-9555420c4ecce0faf6611c80a67f5eef","language":"javascript","views":{"any-tags-by-date":{"map":"function(doc) {\n  if (doc.doc_type != \"resource_data\" || !doc.node_timestamp) return;\n  var node_timestamp = Math.floor(Date.parse(doc.node_timestamp)/1000);\n  var sent_keys = [];\n  for(var i in doc.keys){\n    if(sent_keys.indexOf(doc.keys[i].toLowerCase()) < 0)\n    {\n       sent_keys.push(doc.keys[i].toLowerCase());\n       emit([doc.keys[i].toLowerCase(), node_timestamp], null);\n    }\n  }\n  for(i in doc.payload_schema){\n    if(sent_keys.indexOf(doc.payload_schema[i].toLowerCase()) < 0)\n    {\n       sent_keys.push(doc.payload_schema[i].toLowerCase());\n       emit([doc.payload_schema[i].toLowerCase(), node_timestamp], null);\n    }\n  }\n}","reduce":"_count"},"identity-by-date":{"map":"function(doc) {\n  if (doc.doc_type != \"resource_data\" || !doc.node_timestamp) return;\n    var node_timestamp = Math.floor(Date.parse(doc.node_timestamp)/1000);\n    var sent = [];\n    if(doc.identity) {\n        if(doc.identity.submitter && sent.indexOf(doc.identity.submitter.toLowerCase()) < 0) {\n            sent.push(doc.identity.submitter.toLowerCase());\n            emit([doc.identity.submitter.toLowerCase(), node_timestamp], null);\n        }\n        if(doc.identity.curator && sent.indexOf(doc.identity.curator.toLowerCase()) < 0) {\n            sent.push(doc.identity.curator.toLowerCase());\n            emit([doc.identity.curator.toLowerCase(), node_timestamp], null);\n        }\n        if(doc.identity.owner && sent.indexOf(doc.identity.owner.toLowerCase()) < 0) {\n            sent.push(doc.identity.owner.toLowerCase());\n            emit([doc.identity.owner.toLowerCase(), node_timestamp], null);\n        }\n        if(doc.identity.signer && sent.indexOf(doc.identity.signer.toLowerCase()) < 0) {\n            sent.push(doc.identity.signer.toLowerCase());\n            emit([doc.identity.signer.toLowerCase(), node_timestamp], null);\n        }\n    }\n}","reduce":"_count"},"by-date":{"map":"function(doc) {\n  if (doc.doc_type != \"resource_data\" || !doc.node_timestamp) return;\n  var node_timestamp = Math.floor(Date.parse(doc.node_timestamp)/1000);\n  emit(node_timestamp,null);\n}","reduce":"_count"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/by-date/","views/by-date/reduce.js","views/by-date/map.js","views/identity-by-date/","views/identity-by-date/reduce.js","views/identity-by-date/map.js","views/any-tags-by-date/","views/any-tags-by-date/reduce.js","views/any-tags-by-date/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"Name of your CouchApp","objects":{},"description":"CouchApp"}},
{"_id":"_design/oai-pmh-get-records","_rev":"3-ff6d159761019a2924605ba5190f7e4c","language":"javascript","views":{"docs":{"map":"function(doc) {\n\n\tif (doc.doc_type && doc.doc_type==\"resource_data\" && doc.node_timestamp && doc.payload_schema) {\n\t\t\n\t\tvar okay = false;\n\t\tif (doc.payload_placement && doc.payload_placement == \"inline\" && doc.resource_data) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar data = doc.resource_data.replace(/^<\\?xml\\s+version\\s*=\\s*([\"'])[^\\1]+\\1[^?]*\\?>/, \"\");\n\t\t\t\tdata = data.replace(/\\s*<!DOCTYPE\\s[^>]*>/m,\"\");\n\t\t\t\tvar e4x = new XML(data);\t\t\t\t\n\t\t\t\tif (e4x) {\n\t\t\t\t\tokay = true;\n\t\t\t\t}\n\t\t\t} catch (error){\n\t\t\t\tokay = false;\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tokay = true;\n\t\t}\n\t\t\n\t\tif (okay) {\n\t\t\tif (doc.doc_ID) {\n\t\t\t\temit([\"by_doc_ID\",doc.doc_ID], null);\n\t\t\t}\n\t\t\tif (doc.resource_locator) {\n\t\t\t\tif (Object.prototype.toString.call( doc.resource_locator ) === '[object Array]') {\n\t\t            for (i=0; i<doc.resource_locator.length; i++) {\n\t\t                emit([\"by_resource_locator\",doc.resource_locator[i]],  null);  \n\t\t            }\n\t\t        } else {\n\t\t            emit([\"by_resource_locator\",doc.resource_locator], null);  \n\t\t        }\n\t\t\t}\n\t\t}\n\t}\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"OAI-PMH Get Records","objects":{},"description":"OAI-PMH Support for the Learning Registry"}},
{"_id":"_design/oai-pmh-identify-timestamp","_rev":"3-b0755b36cbbc56da5ae92973774e0cd7","language":"javascript","views":{"docs":{"map":"function(doc) {\n\tif (doc.doc_type && doc.doc_type == \"resource_data\" && doc.node_timestamp) {\n\t\tif (doc.payload_placement && doc.payload_placement == \"inline\" && doc.resource_data) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar data = doc.resource_data.replace(/^<\\?xml\\s+version\\s*=\\s*([\"'])[^\\1]+\\1[^?]*\\?>/, \"\");\n\t\t\t\tdata = data.replace(/\\s*<!DOCTYPE\\s[^>]*>/m,\"\");\n\t\t\t\tvar e4x = new XML(data);\n\t\t\t\tif (e4x) {\n\t\t\t\t\temit(doc.node_timestamp, 1);\n\t\t\t\t}\n\t\t\t} catch (error){\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\temit(doc.node_timestamp, 1);\n\t\t}\n\t\t\n\t}\n}","reduce":"function(keys, values, rereduce) {\n  return sum(values);\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/reduce.js","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"OAI-PMH Identify Timestamp","objects":{},"description":"OAI-PMH Support for the Learning Registry"}},
{"_id":"_design/oai-pmh-list-identifiers","_rev":"3-04a76f47924ee2a90fef27f2fa340ff8","language":"javascript","views":{"docs":{"map":"function(doc) {\n\n\tvar makeValidSchema = function (origSchema) {\t\t\n\t\tclean = origSchema.replace(/[^A-Za-z0-9\\-_\\.!~\\*'\\(\\)]/g, '_');\n\t\treturn clean;\n\t}\n\t\n\tif (doc.doc_type && doc.doc_type==\"resource_data\" && doc.node_timestamp && doc.payload_schema) {\n\t\t\n\t\tvar okay = false;\n\t\tif (doc.payload_placement && doc.payload_placement == \"inline\" && doc.resource_data) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar data = doc.resource_data.replace(/^<\\?xml\\s+version\\s*=\\s*([\"'])[^\\1]+\\1[^?]*\\?>/, \"\");\n\t\t\t\tdata = data.replace(/\\s*<!DOCTYPE\\s[^>]*>/m,\"\");\n\t\t\t\tvar e4x = new XML(data);\n\t\t\t\tif (e4x) {\n\t\t\t\t\tokay = true;\n\t\t\t\t}\n\t\t\t} catch (error){\n\t\t\t\tokay = false;\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tokay = true;\n\t\t}\n\t\t\n\t\tif (okay) {\n\t\t\tfor (var i = 0; i < doc.payload_schema.length; i++) {\n\t\t\t\tts = doc.node_timestamp.replace(/\\.[0-9]+Z/gi, \"\");\n\t\t\t\temit([makeValidSchema(doc.payload_schema[i]),ts], null);\n\t\t\t}\n\t\t}\n\t}\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"OAI-PMH List Identifiers","objects":{},"description":"OAI-PMH Support for the Learning Registry"}},
{"_id":"_design/oai-pmh-list-metadata-formats","_rev":"3-cb98f2a3c02bbd209739ec314c7fb327","language":"javascript","views":{"docs":{"map":"function(doc) {\n\tvar makeValidSchema = function (origSchema) {\t\t\n\t\tclean = origSchema.replace(/[^A-Za-z0-9\\-_\\.!~\\*'\\(\\)]/g, '_');\n\t\treturn clean;\n\t}\n\t\n\tif (doc.doc_type && doc.doc_type == \"resource_data\" && doc.payload_schema) {\n\t\t\n\t\tvar okay = false;\n\t\tif (doc.payload_placement && doc.payload_placement == \"inline\" && doc.resource_data) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar data = doc.resource_data.replace(/^<\\?xml\\s+version\\s*=\\s*([\"'])[^\\1]+\\1[^?]*\\?>/, \"\");\n\t\t\t\tdata = data.replace(/\\s*<!DOCTYPE\\s[^>]*>/m,\"\");\n\t\t\t\tvar e4x = new XML(data);\n\t\t\t\tif (e4x) {\n\t\t\t\t\tokay = true;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tokay = false;\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tokay = true;\n\t\t}\n\t\t\n\t\tif (okay) {\n\t\t\tfor (var i = 0; i < doc.payload_schema.length; i++) {\n\t\t\t\t\n\t\t\t\tif (doc.doc_ID) {\n\t\t\t\t\temit([makeValidSchema(doc.payload_schema[i]), \"by_doc_ID\",doc.doc_ID], (doc.payload_schema_locator ? doc.payload_schema_locator : null));\n\t\t\t\t}\n\t\t\t\tif (doc.resource_locator) {\n\t\t\t\t\tif (Object.prototype.toString.call( doc.resource_locator ) === '[object Array]') {\n\t\t\t            for (j=0; j<doc.resource_locator.length; j++) {\n\t\t\t\t\t\t\temit([makeValidSchema(doc.payload_schema[i]), \"by_resource_locator\",doc.resource_locator[j]], (doc.payload_schema_locator ? doc.payload_schema_locator : null));\n\t\t\t            }\n\t\t\t        } else {\n\t\t\t\t\t\temit([makeValidSchema(doc.payload_schema[i]), \"by_resource_locator\",doc.resource_locator], (doc.payload_schema_locator ? doc.payload_schema_locator : null));\n\t\t\t        }\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}","reduce":"function (key, values, rereduce) {\n\tif (rereduce == false) {\n\t\tvar urlMap = {};\n\t\tfor (var i=0; i<values.length; i++) {\n\t\t\turlMap[values[i]] = true;\n\t\t}\n\t\tvar urlSet = [];\n\t\tfor (url in urlMap) {\n\t\t\turlSet[urlSet.length] = url;\n\t\t}\n\t\treturn urlSet;\n\t} else {\n\t\tvar urlMap = {}\n\t\tfor (var i=0; i<values.length; i++) {\n\t\t\tfor (var j=0; j<values[i].length; j++) {\t\n\t\t\t\turlMap[values[i][j]] = true;\n\t\t\t}\n\t\t}\n\t\tvar urlSet = [];\n\t\tfor (url in urlMap) {\n\t\t\turlSet[urlSet.length] = url;\n\t\t}\n\t\treturn urlSet;\n\t}\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/reduce.js","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"OAI-PMH List Metadata Formats","objects":{},"description":"OAI-PMH Support for the Learning Registry"}},
{"_id":"_design/oai-pmh-test-data","_rev":"3-23d4516c7278e79112ff5bbc82e2bbab","language":"javascript","views":{"docs":{"map":"function(doc) {\n  if (doc._id.match(/.*TEST-DATA.*/) && doc.node_timestamp) {\n\t  emit(doc._id, doc);\n  }\n}"}},"README":"## Generated by CouchApp\n\nCouchApps are web applications which can be served directly from [CouchDB](http://couchdb.apache.org). This gives them the nice property of replicating just like any other data stored in CouchDB. They are also simple to write as they can use the built-in jQuery libraries and plugins that ship with CouchDB.\n\n[More info about CouchApps here.](http://couchapp.org)\n\n## Deploying this app\n\nAssuming you just cloned this app from git, and you have changed into the app directory in your terminal, you want to push it to your CouchDB with the CouchApp command line tool, like this:\n\n    couchapp push . http://name:password@hostname:5984/mydatabase\n\nIf you don't have a password on your CouchDB (admin party) you can do it like this (but it's a bad, idea, set a password):\n\n    couchapp push . http://hostname:5984/mydatabase\n\nIf you get sick of typing the URL, you should setup a `.couchapprc` file in the root of your directory. Remember not to check this into version control as it will have passwords in it.\n\nThe `.couchapprc` file should have contents like this:\n\n    {\n      \"env\" : {\n        \"public\" : {\n          \"db\" : \"http://name:pass@mycouch.couchone.com/mydatabase\"\n        },\n        \"default\" : {\n          \"db\" : \"http://name:pass@localhost:5984/mydatabase\"\n        }\n      }\n    }\n\nNow that you have the `.couchapprc` file set up, you can push your app to the CouchDB as simply as:\n\n    couchapp push\n\nThis pushes to the `default` as specified. To push to the `public` you'd run:\n\n    couchapp push public\n\nOf course you can continue to add more deployment targets as you see fit, and give them whatever names you like.","couchapp":{"manifest":["views/","views/docs/","views/docs/map.js","README.md","language","couchapp.json"],"signatures":{},"name":"OAI-PMH Test Data","objects":{},"description":"OAI-PMH Support for the Learning Registry"}},
{"_id":"_design/restrict-writers","_rev":"1-318b1fad95bcfbff9f76c570c32baead","validate_doc_update":"function(newDoc, oldDoc, userCtx, secObj) {\n    if (newDoc._deleted === true) {\n        // allow deletes by admins and matching users\n        // without checking the other fields\n        if (userCtx.roles.indexOf('_admin') !== -1) {\n            return;\n        } else {\n            throw ({\n                forbidden: 'Only server couadmins may delete docs.'\n            });\n        }\n    }\n\n    var is_server_or_database_admin = function(userCtx, secObj) {\n            // see if the user is a server admin\n            if (userCtx.roles.indexOf('_admin') !== -1) {\n                return true; // a server admin\n            }\n\n            // see if the user a database admin specified by name\n            if (secObj && secObj.admins && secObj.admins.names) {\n                if (secObj.admins.names.indexOf(userCtx.name) !== -1) {\n                    return true; // database admin\n                }\n            }\n\n            // see if the user a database admin specified by role\n            if (secObj && secObj.admins && secObj.admins.roles) {\n                var db_roles = secObj.admins.roles;\n                for (var idx = 0; idx < userCtx.roles.length; idx++) {\n                    var user_role = userCtx.roles[idx];\n                    if (db_roles.indexOf(user_role) !== -1) {\n                        return true; // role matches!\n                    }\n                }\n            }\n\n            return false; // default to no admin\n        }\n\n    if (!is_server_or_database_admin(userCtx, secObj)) {\n        if (newDoc) {\n            throw ({\n                forbidden: 'Only server or db admin can modify this db.'\n            });\n        }\n    }\n\n}","couchapp":{"signatures":{},"objects":{},"manifest":["validate_doc_update.js"]}}
]}
